           Difference Between Static and non-static in Java.

In order to grasp how classes, variables, and methods operate in Java, it is crucial to comprehend the 
notions of static and non-static. Non-static members are linked to specific class instances, whereas static
 members are connected to the class. In this section, we will contrast static versus non-static Java components,
 highlighting their differences and potential applications.

                                               Associated with

                                                   Static 

Static members (variables and methods) are associated with the class itself rather than with individual 
instances.

                                                  Non-Static

 Non-static members are specific to each instance of a class, as they are tied to objects created from the 
class.

                                              Memory Allocation

                                                    static

 Static members are allocated memory only once, at the time of class loading. They are shared among all 
instances of the class.

                                                  Non-Static

Non-static members have memory allocated separately for each instance of the class. Each object has its own 
copy of non-static members.

                                                  Accessing

Static: Static members can be accessed directly using the class name followed by the member name 
(e.g., ClassName.memberName). They are accessible from anywhere within the program.

Non-Static: Non-static members are accessed using an object reference followed by the member name 
(e.g., objectReference.memberName). They are specific to a particular instance of the class.

                                         Initialization

Static: Static members are initialized when the class is loaded into memory, typically during program startup. 
Initialization happens only once.

Non-Static: Non-static members are initialized when each instance of the class is created, usually using the 
new keyword. Initialization occurs separately for each object.

                                                 Scope

Static: Static members have a global scope and can be accessed from anywhere within the program, even without 
creating an instance of the class.

Non-Static: Non-static members have a local scope and can be accessed only through an instance of the class. 
They are not accessible without creating an object.

                                          Access to Members

Static: Static members can only access other static members within the same class. They cannot directly access 
non-static members.

Non-Static: Non-static members can access both static and non-static members within the same class. They have 
direct access to all members.

                                                Usage

Static: Static members are commonly used for utility methods, constants, or variables that are not specific to 
individual instances. For example, a Math class containing mathematical functions.

Non-Static: Non-static members are used for instance-specific behavior, as they hold data specific to each 
object. For example, instance variables that store unique values for each object.

                                          
                                   ------------------------------------


Difference between static and non-static method in Java

A static method is a method that belongs to a class, but it does not belong to an instance of that class and
 this method can be called without the instance or object of that class. Every method in java defaults to a 
non-static method without static keyword preceding it. Non-static methods can access any static method and 
static variable, without creating an instance of the object.

1) Accessing members and methods

2) Calling process

3) Binding process

4) Overriding process

5) Memory allocation

                                   Accessing members and methods

A static method can only access static data members and static methods of another class or the same class but
cannot access non-static methods and variables. Also, a static method can rewrite the values of any static 
data member.
         A non-static method can access static data members and static methods as well as non-static members 
and methods of another class or the same class, and also can change the values of any static data member.

Example:-

class Main {
 
    // Static method

    public static int sum(int a, int b)
    {
       
 // Simply returning the sum

        return a + b;
    }
}
 
// Class 2

class App {
 
    // Main driver method

    public static void main(String[] args)
    {
        // Custom values for integer

        // to be summed up

        int n = 3, m = 6;
 
        // Calling the static method of above class

        // and storing sum in integer variable

        int s = Helper.sum(n, m);
 
        // Print and display the sum

        System.out.print("sum is = " + s);
    }
}

Example:-


            // Java program to Illustrate Calling of a Non-Static Method
 
    
class Main1 {
 
    // Non-static method

    public int sum(int a, int b)
    {
        // Returning sum of numbers

        return a + b;
    }
}
 

class App1{
 
    // Main driver method

    public static void main(String[] args)
    {
        // Input integers to be summed up

        int n = 3, m = 6;
 
        // Creating object of above class

        Helper g = new Helper();
 
        // Calling above method to compute sum

        int s = g.sum(n, m);
 
        // Calling the non-static method

        System.out.print("sum is = " + s);
    }
}

                                              Calling process 

The memory of a static method is fixed in the ram, for this reason, we donâ€™t need the object of a class in 
which the static method is defined to call the static method. To call the method we need to write the class 
name followed by the name of the method

Syntax: Calling of static methods

class Main3{
 public static void geek()
 { }
}

// calling
Main3.geek();

The memory of the non-static method is not fixed in the ram, so we need a class object to call a non-static
 method. To call the method we need to write the name of the method followed by the class object name

Syntax: Calling of non-static methods

class Main4{
 public void geek()
 { }
}

// creating object
Main4 g = new Main4();

// calling
m.geek();

                                              Binding process
 
In the static method, the method use compile-time or early binding. For this reason, we can access the static 
method without creating an instance.
 In a non-static method, the method use runtime or dynamic binding. So that we cannot access a non-static 
method without creating an instance. 

                                                Overriding 

In the static method, we cannot override a static method, because of early binding.

Example:-

// Override of static method
class Parent {
 
    // static method
    static void show()
    {
        System.out.println("Parent");
    }
}
 
// Parent inherit in Child class
class Child extends Parent {
 
    // override show() of Parent
    void show()
    {
        System.out.println("Child");
    }
}
 
class App5 {
    public static void main(String[] args)
    {
        Parent p = new Parent();
        // calling Parent's show()
        p.show();
        // cannot override Parent's show() 
 }
}

Example:-

// Override of non-static method
 
class Parent {
    void show()
    {
        System.out.println("Parent");
    }
}
 
// Parent inherit in Child class
class Child extends Parent {
 
    // override show() of Parent
    void show()
    {
        System.out.println("Child");
    }
}
 
class Main6 {
    public static void main(String[] args)
 {
        Parent p = new Parent();
        // calling Parent's show()

        p.show();
 
        Parent c = new Child();
        // calling Child's show()
        c.show();
    }
}

                    -------------------------------------------------------------
