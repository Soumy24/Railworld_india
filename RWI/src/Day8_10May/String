 -What is String in Java-

String is a sequence of characters. But in Java, string is an object that represents a sequence
of characters. The java.lang.String class is used to create a string object.

                            -How to create a string object-

There are two ways to create String object:

1) By string literal
2) By new keyword

                                   -String Literal-

Java String literal is created by using double quotes.

Example:-

String s="welcome";

Each time you create a string literal, the JVM checks the "string constant pool" first.
If the string already exists in the pool, a reference to the pooled instance is returned. If the string
doesn't exist in the pool, a new string instance is created and placed in the pool.

Example:-

 String s1="Welcome";

 String s2="Welcome";//It doesn't create a new instance

                                         -By new keyword-

String s=new String("Welcome");//creates two objects and one reference variable

In such case, JVM will create a new string object in normal (non-pool) heap memory, and the
literal "Welcome" will be placed in the string constant pool.

 The variable s will refer to the object in a heap (non-pool).

-----------------------------------------------------------------------------------------------




                                     -Java String class methods-

The java.lang.String class provides many useful methods to perform operations on sequence of char values.


1) char charAt(int index):- It returns char value for the particular index.

2) int length():- It returns string length.
3) static String format(String format, Object... args):-It returns a formatted string.

4) static String format(Locale l, String format, Object... args):- It returns formatted string with given
                                                                   locale.

5) String substring(int beginIndex):- It returns substring for given begin index.

6) String substring(int beginIndex, int endIndex):-It returns substring for given begin index and end index.

7) boolean contains(CharSequence s):- It returns true or false after matching the sequence of char value.

8) static String join(CharSequence delimiter, CharSequence... elements):-It returns a joined string.

9) static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements):- It returns a joined
                                                                                           string.

10) boolean equals(Object another):- It checks the equality of string with the given object.

11) boolean isEmpty():-	It checks if string is empty.

12) String concat(String str):- It concatenates the specified string.

13) String replace(char old, char new):- It replaces all occurrences of the specified char value.

14) String replace(CharSequence old, CharSequence new):- It replaces all occurrences of the specified
                                                         CharSequence.
15) static String equalsIgnoreCase(String another):- It compares another string. It doesn't check case.

16) String[] split(String regex):- It returns a split string matching regex.

17) String[] split(String regex, int limit):- It returns a split string matching regex and limit.

18) String intern():- It returns an interned string.

19) int indexOf(int ch):- It returns the specified char value index.

20) int indexOf(int ch, int fromIndex):- It returns the specified char value index starting with given index.

21) int indexOf(String substring):- It returns the specified substring index.

22) int indexOf(String substring, int fromIndex):- It returns the specified substring index starting with
                                                   given index.

23) String toLowerCase():- It returns a string in lowercase.

24) String toLowerCase(Locale l):- It returns a string in lowercase using specified locale.

25) String toUpperCase(): It returns a string in uppercase.

26) String toUpperCase(Locale l):- It returns a string in uppercase using specified locale.

27) String trim():- It removes beginning and ending spaces of this string.

28) static String valueOf(int value):- It converts given type into string. It is an overloaded method.

----------------------------------------------------------------------------------------------------------

                                         -Java StringBuilder Class-

Java StringBuilder class is used to create mutable (modifiable) String. The Java StringBuilder class is
same as StringBuffer class except that it is non-synchronized. It is available since JDK 1.5.

                               Important Constructors of StringBuilder class


1) StringBuilder():- It creates an empty String Builder with the initial capacity of 16.

2) StringBuilder(String str):- It creates a String Builder with the specified string.

3) StringBuilder(int length):- It creates an empty String Builder with the specified capacity as length.

--------------------------------------------------------------------------------------------------------------

                             -Important methods of StringBuilder class-


1) public StringBuilder append(String s):- It is used to append the specified string with this string.
                                           The append() method is overloaded like append(char), append(boolean),
                                         append(int), append(float), append(double) etc.

2) public StringBuilder insert(int offset, String s):- It is used to insert the specified string with this
                                                       string at the specified position. The insert() method
                                                  is overloaded like insert(int, char), insert(int, boolean),
                                                 insert(int, int), insert(int, float), insert(int, double) etc.

3) public StringBuilder replace(int startIndex, int endIndex, String str):- It is used to replace the string
                                                                         from specified startIndex and endIndex.

4) public StringBuilder delete(int startIndex, int endIndex):- It is used to delete the string from specified
                                                               startIndex and endIndex.

5) public StringBuilder reverse():- It is used to reverse the string.

6) public int capacity():- It is used to return the current capacity.

7) public void ensureCapacity(int minimumCapacity):- It is used to ensure the capacity at least equal to the
                                                     given minimum.

8) public char charAt(int index):- It is used to return the character at the specified position.

9) public int length():- It is used to return the length of the string i.e. total number of characters.

10) public String substring(int beginIndex):- It is used to return the substring from the specified beginIndex.

11) public String substring(int beginIndex, int endIndex):- It is used to return the substring from the
                                                            specified beginIndex and endIndex.

---------------------------------------------------------------------------------------------------------------

                                      -Java StringBuilder Examples-

                                     -StringBuilder append() method-

The StringBuilder append() method concatenates the given argument with this String.

Example:-

 class StringBuilderExample1
 {
 public static void main(String args[])
 {

 StringBuilder sb=new StringBuilder("Hello ");

sb.append("Java"); //now original string is changed

System.out.println(sb); //prints Hello Java
}
}

                                -StringBuilder insert() method-

The StringBuilder insert() method inserts the given string with this string at the given position.

Example:-

 class StringBuilderExample2
 {
 public static void main(String args[])
 {

 StringBuilder sb=new StringBuilder("Hello ");

sb.insert(1,"Java"); //now original string is changed

System.out.println(sb); //prints HJavaello
}
}

                              -StringBuilder replace() method-

The StringBuilder replace() method replaces the given string from the specified beginIndex and endIndex.

Example:-

 class StringBuilderExample3
 {
 public static void main(String args[])
 {

StringBuilder sb=new StringBuilder("Hello");

sb.replace(1,3,"Java");

System.out.println(sb); //prints HJavalo
}
}

                                -StringBuilder delete() method-

The delete() method of StringBuilder class deletes the string from the specified beginIndex to endIndex.


  class StringBuilderExample4
  {
  public static void main(String args[])
  {

StringBuilder sb=new StringBuilder("Hello");

sb.delete(1,3);

System.out.println(sb);//prints Hlo
}
}

                            -StringBuilder reverse() method-

The reverse() method of StringBuilder class reverses the current string.

Example:-

  class StringBuilderExample5
   {
  public static void main(String args[])
    {

StringBuilder sb=new StringBuilder("Hello");

sb.reverse();

System.out.println(sb);//prints olleH
}
}

                             -StringBuilder capacity() method-

The capacity() method of StringBuilder class returns the current capacity of the Builder. The default capacity
of the Builder is 16. If the number of character increases from its current capacity, it increases the capacity
by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.

Example:-

 class StringBuilderExample6
  {

public static void main(String args[])
 {

StringBuilder sb=new StringBuilder();


System.out.println(sb.capacity());//default 16

sb.append("Hello");

System.out.println(sb.capacity());//now 16

sb.append("Java is my favourite language");

System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2
}
}



                           -StringBuilder ensureCapacity() method-

The ensureCapacity() method of StringBuilder class ensures that the given capacity is the minimum to the
current capacity. If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2.

Example:-

 class StringBuilderExample7
 {
 public static void main(String args[])
 {

StringBuilder sb=new StringBuilder();

System.out.println(sb.capacity());//default 16

sb.append("Hello");

System.out.println(sb.capacity());//now 16

sb.append("Java is my favourite language");

System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2

sb.ensureCapacity(10);//now no change

System.out.println(sb.capacity());//now 34

sb.ensureCapacity(50);//now (34*2)+2

System.out.println(sb.capacity());//now 70
}
}